rule filter_alignment:
    input: 
        raw_bam = "mapped_reads/{sample}.raw.bam"
    output:
        flt_bam = temp("mapped_reads/{sample}.flt.bam")
    params: 
        prefix = "{sample}"
    message: "filtering alignment for {wildcards.sample}"
    threads: 10
    shell:
        """
        samtools view -@ {threads} -F 1804 -q 30 -u {input.raw_bam} |
        samtools sort  -@ {threads} -T {params.prefix} -o {output.flt_bam} -
        """
    
rule mark_duplicates:
    input:
        flt_bam = "mapped_reads/{sample}.flt.bam"
    output:
        dup_bam = "mapped_reads/{sample}.dup.bam",
        qc = "qc/{sample}.pcrDups.txt"
    threads: 1
    message: "marking duplicates for {wildcards.sample}"
    shell:
        """
			  java -Xmx4G -jar {config[path]}picard.jar MarkDuplicates\
			  INPUT={input.flt_bam} OUTPUT={output.dup_bam} \
			  METRICS_FILE={output.qc} ASSUME_SORTED=true \
			  VALIDATION_STRINGENCY=LENIENT REMOVE_DUPLICATES=false
			  """
             
rule remove_duplicates:
    input: "mapped_reads/{sample}.dup.bam"
    output: 
        final_bam = "mapped_reads/{sample}.final.bam",
        final_bai = "mapped_reads/{sample}.final.bai"
    conda: "./chipseq.yaml"
    threads: 10
    message: "removing duplicates for {wildcards.sample}"
    params:
        prefix = "{sample}_final"
    shell:
        """
        samtools view -@ {threads} -F 1804 -b -o {output.final_bam} {input}
        samtools index {output.final_bam} {output.final_bai}
        """
rule generate_bed:
	  input: "mapped_reads/{sample}.final.bam"
	  output: "bed_files/{sample}.bed.gz"
	  threads: 4
	  shell: """ bedtools bamtobed -i {input} | awk '{{OFS="\t"; $4="N"; $5="1000"; print $0}}' | sort --parallel={threads} -k1,1 -k2,2n | gzip -c > {output} """